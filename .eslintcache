[{"C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\index.js":"1","C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\App.js":"2","C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\components\\Player.js":"3","C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\components\\Song.js":"4","C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\util.js":"5","C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\data.js":"6","C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\components\\Library.js":"7","C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\components\\LibrarySong.js":"8","C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\components\\Nav.js":"9"},{"size":198,"mtime":1610619700618,"results":"10","hashOfConfig":"11"},{"size":1260,"mtime":1610774230190,"results":"12","hashOfConfig":"11"},{"size":4243,"mtime":1610772111565,"results":"13","hashOfConfig":"11"},{"size":380,"mtime":1610774285852,"results":"14","hashOfConfig":"11"},{"size":457,"mtime":1610642175594,"results":"15","hashOfConfig":"11"},{"size":2555,"mtime":1610682142613,"results":"16","hashOfConfig":"11"},{"size":779,"mtime":1610727776341,"results":"17","hashOfConfig":"11"},{"size":889,"mtime":1610732607112,"results":"18","hashOfConfig":"11"},{"size":448,"mtime":1610727637562,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"oif0ot",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\index.js",[],["41","42"],"C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\App.js",[],"C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\components\\Player.js",["43"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPlay,\r\n  faAngleLeft,\r\n  faAngleRight,\r\n  faPause,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Player = ({\r\n  currentSong,\r\n  isPlaying,\r\n  setIsPlaying,\r\n  songs,\r\n  setCurrentSong,\r\n  setSongs,\r\n}) => {\r\n  //State\r\n  const [songInfo, setSongInfo] = useState({\r\n    currentTime: 0,\r\n    duration: 0,\r\n    animationPercentage: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const newSongs = songs.map((s) => {\r\n      if (s.id === currentSong.id) {\r\n        return { ...s, active: true };\r\n      } else {\r\n        return { ...s, active: false };\r\n      }\r\n    });\r\n    setSongs(newSongs);\r\n  }, [currentSong]);\r\n\r\n  //Ref\r\n  const audioRef = useRef(null);\r\n\r\n  const skipTrackHandler = (direction) => {\r\n    let index = 0;\r\n    for (let i = 0; i < songs.length; i++) {\r\n      if (songs[i].id === currentSong.id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    if (direction === \"skip-forward\") {\r\n      index++;\r\n      setCurrentSong(songs[index % songs.length]);\r\n      setIsPlaying(false);\r\n    } else {\r\n      if (index === 0) {\r\n        index = songs.length - 1;\r\n      } else {\r\n        index--;\r\n      }\r\n      setCurrentSong(songs[index]);\r\n      setIsPlaying(false);\r\n    }\r\n  };\r\n\r\n  // Event Handlers\r\n  const playSongHandler = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause();\r\n      setIsPlaying(!isPlaying);\r\n    } else {\r\n      audioRef.current.play();\r\n      setIsPlaying(!isPlaying);\r\n    }\r\n  };\r\n\r\n  const getTime = (time) => {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  };\r\n\r\n  const timeUpdateHandler = (e) => {\r\n    const current = e.target.currentTime;\r\n    const duration1 = e.target.duration;\r\n    setSongInfo({ ...songInfo, currentTime: current, duration: duration1 });\r\n  };\r\n\r\n  const timeUpdateHandler1 = (e) => {\r\n    const current = e.target.currentTime;\r\n    // Calculate Percentage\r\n    const roundedCurrent = Math.round(current);\r\n\r\n    const roundedDuration = Math.round(songInfo.duration);\r\n    const animation = Math.round((roundedCurrent / roundedDuration) * 100);\r\n    setSongInfo({\r\n      ...songInfo,\r\n      currentTime: current,\r\n      animationPercentage: animation,\r\n    });\r\n  };\r\n\r\n  const dragHandler = (e) => {\r\n    audioRef.current.currentTime = e.target.value;\r\n    setSongInfo({ ...songInfo, currentTime: e.target.value });\r\n  };\r\n\r\n  // Add the styles for track\r\n  const trackAnim = {\r\n    transform: `translateX(${songInfo.animationPercentage}%)`,\r\n  };\r\n\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"time-control\">\r\n        <p>{getTime(songInfo.currentTime)}</p>\r\n        <div\r\n          style={{\r\n            background: `linear-gradient(to right,${currentSong.color[0]},${currentSong.color[1]})`,\r\n          }}\r\n          className=\"track\"\r\n        >\r\n          <input\r\n            min={0}\r\n            max={songInfo.duration}\r\n            value={songInfo.currentTime}\r\n            onChange={dragHandler}\r\n            type=\"range\"\r\n          />\r\n          <div style={trackAnim} className=\"animate-track\"></div>\r\n        </div>\r\n        <p>{getTime(songInfo.duration)}</p>\r\n      </div>\r\n      <div className=\"play-control\">\r\n        {/*FontAwesomeIcon is a comopnent pass icon as props to the component  */}\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(\"skip-back\")}\r\n          className=\"skip-back\"\r\n          size=\"2x\"\r\n          icon={faAngleLeft}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={playSongHandler}\r\n          className=\"play\"\r\n          size=\"2x\"\r\n          icon={isPlaying ? faPause : faPlay}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(\"skip-forward\")}\r\n          className=\"skip-forward\"\r\n          size=\"2x\"\r\n          icon={faAngleRight}\r\n        />\r\n      </div>\r\n      <audio\r\n        onTimeUpdate={timeUpdateHandler1}\r\n        onLoadedMetadata={timeUpdateHandler}\r\n        ref={audioRef}\r\n        src={currentSong.audio}\r\n        onEnded={() => skipTrackHandler(\"skip-forward\")}\r\n      ></audio>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\components\\Song.js",[],"C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\util.js",[],["44","45"],"C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\data.js",[],"C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\components\\Library.js",[],"C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\components\\LibrarySong.js",[],"C:\\Users\\ravim\\Desktop\\Node1\\Dev Ed\\music-player\\src\\components\\Nav.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":34,"column":6,"nodeType":"52","endLine":34,"endColumn":19,"suggestions":"53"},{"ruleId":"46","replacedBy":"54"},{"ruleId":"48","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setSongs' and 'songs'. Either include them or remove the dependency array. If 'setSongs' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["58"],["56"],["57"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [currentSong, setSongs, songs]",{"range":"61","text":"62"},[737,750],"[currentSong, setSongs, songs]"]